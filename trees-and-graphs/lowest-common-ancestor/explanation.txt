Algorithm explanation:
- recursively call helper function
    - base case: null node, return null
    - if node is p or q, return this node
        - if the other of p and q is in a subtree, we do not need to verify that to know this is the correct node
    - otherwise, recursively call on left and right subtrees
    - if both calls return a node, this node is the common ancestor, so return this node
    - otherwise, return whichever call was not null
    - if no conditions are satisfied, p and q were not found yet, so return null

Complexity analysis:
- Time: O(n), in the worst case, one node is the left-most leaf and the other is the right-most leaf, so every node must be visited
- Space: O(log(n)), if considering stack space / explicit stack for iterative solution