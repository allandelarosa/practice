Explanation:
- keep a doubly-ended linked list in order to move around elements easily
- keep a dictionary to get node references in constant time

get:
    - check dictionary for key:
        - if it is not used, return -1
        - otherwise, move corresponding node to the end of the linked list and return its value

put:
    - if key is used, move corresponding node to end of list and update value; otherwise, create a new node and add it to the end of the list 
    - if the length of the list has exceeded the capacity, remove the very first node and also remove the entry from the dictionary 
    - update list length accordingly


Complexity analysis:
(c is the capacity)
- Time: 
    - O(1) for get, since checking dictionary and moving node to end of list can be done in constant time
    - O(1) for put, since adding a node, moving a node to the end of the list, and removing the first node can all be done in constant time
- Space: O(c), since the can be up to c elements in the dictionary and up to 2+c nodees in the linked list (additional 2 to store sentinnel head and tail nodes)