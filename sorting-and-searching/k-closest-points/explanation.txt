Algorithm explanation:
- iterate over each point in points
- calculate the distance of that point from the origin
- put this distance and the point into a max heap
    - if the size of the max heap exceeds K, pop from the heap; this pops whatever is currently farthest from the origin 
- return the points that remain in the heap


Complexity analysis:
- Time: O(n * log(K)), since we are maintaing a heap of size K, all operations on it will take log(K) time, and we will perform n operations for each of the points 
- Space: O(K), since the heap will have at most K + 1 elements